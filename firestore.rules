rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // For testing purposes, allow all read/write access
    // WARNING: This is not secure for production
    match /{document=**} {
      allow read, write: if true;
    }
    
    /*
    // Production-ready rules (commented out for now)
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read if the user is authenticated and requesting their own data
      allow read: if isAuthenticated() 
        && (isOwner(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      // Allow create if the user is authenticated and the document ID matches their UID
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.uid == userId
        && request.resource.data.email == request.auth.token.email;
      
      // Allow update if the user is the owner and only updates their own document
      // Prevents changing the UID or email directly
      allow update: if isAuthenticated()
        && isOwner(userId)
        && request.resource.data.uid == resource.data.uid
        && request.resource.data.email == resource.data.email;
      
      // Allow delete if the user is the owner
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Subcollections under users
    match /users/{userId}/{document=**} {
      // Inherit the same rules as the parent document
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    */
  }
}

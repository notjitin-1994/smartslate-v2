import React, { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { toast } from 'sonner';
import { auth } from '@/lib/firebase';
import { 
  BookOpen, 
  Trophy, 
  Clock, 
  CheckCircle, 
  TrendingUp, 
  Award,
  BarChart2,
  ChevronRight,
  Home,
  Loader2,
  LogOut
} from 'lucide-react';

// UI Components
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';

// Glassmorphic styles
const glassPanel = "bg-indigo-500/10 backdrop-blur-lg border border-indigo-400/20 shadow-lg shadow-indigo-500/10";
const glassCardHover = "hover:bg-indigo-500/15 hover:border-indigo-400/30 transition-all duration-300";
const glassButton = "bg-indigo-500/10 hover:bg-indigo-500/20 border-indigo-400/20 hover:border-indigo-400/30 text-indigo-100 hover:text-white";

// Animation variants
const fadeInUp = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.5 }
  }
};

const staggerContainer = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

// Animated Components
const AnimatedCard = motion(Card);
const AnimatedButton = motion(Button);

// Mock data
const mockCourses = [
  { id: 1, title: 'Advanced React Patterns', progress: 75, dueDate: '2023-12-15' },
  { id: 2, title: 'TypeScript Fundamentals', progress: 30, dueDate: '2023-12-30' },
  { id: 3, title: 'UI/UX Design Principles', progress: 10, dueDate: '2024-01-10' },
];

const mockAchievements = [
  { id: 1, title: 'Fast Learner', description: 'Completed 5 courses in one month', icon: <TrendingUp className="h-5 w-5" /> },
  { id: 2, title: 'Perfect Score', description: 'Scored 100% on a quiz', icon: <Award className="h-5 w-5" /> },
  { id: 3, title: 'Early Bird', description: 'Completed a course before the deadline', icon: <Clock className="h-5 w-5" /> },
];

// Helper function to format dates
const formatDate = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(dateString).toLocaleDateString(undefined, options);
};

const ProfilePage: React.FC = () => {
  const { user, loading } = useAuth();
  const navigate = useNavigate();
  const [isSigningOut, setIsSigningOut] = useState(false);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-900 to-indigo-900">
        <Loader2 className="h-12 w-12 animate-spin text-indigo-400" />
      </div>
    );
  }

  if (!user) {
    navigate('/login');
    return null;
  }

  const handleSignOut = async () => {
    try {
      setIsSigningOut(true);
      await auth.signOut();
      toast.success('Successfully signed out');
      navigate('/login');
    } catch (error) {
      console.error('Error signing out:', error);
      toast.error('Error signing out');
      setIsSigning(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-indigo-900 p-4 md:p-8">
      <motion.div 
        className="max-w-6xl mx-auto"
        initial="hidden"
        animate="visible"
        variants={staggerContainer}
      >
        {/* Header */}
        <motion.div 
          className="flex flex-col md:flex-row items-start md:items-center justify-between mb-8 gap-6"
          variants={fadeInUp}
        >
          <div className="flex items-center space-x-4">
            <div className="relative">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-400 to-indigo-600 rounded-full blur-md opacity-50" />
              <Avatar className="h-20 w-20 border-4 border-indigo-500/20 relative">
                <AvatarImage src={user.photoURL || ''} alt={user.displayName || 'User'} />
                <AvatarFallback className="bg-indigo-600 text-white text-2xl font-bold">
                  {user.displayName ? user.displayName.charAt(0).toUpperCase() : 'U'}
                </AvatarFallback>
              </Avatar>
            </div>
            <div>
              <h1 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-blue-400 via-indigo-400 to-teal-400 bg-clip-text text-transparent">
                {user.displayName || 'Learner'}
              </h1>
              <p className="text-indigo-200">{user.email}</p>
              <div className="flex items-center space-x-2 mt-1">
                <Badge variant="outline" className="border-indigo-400/30 text-indigo-200 bg-indigo-500/10">
                  {user.emailVerified ? 'Verified' : 'Unverified'}
                </Badge>
                <span className="text-sm text-indigo-300">
                  Member since {user.metadata.creationTime ? new Date(user.metadata.creationTime).toLocaleDateString() : 'recently'}
                </span>
              </div>
            </div>
          </div>
          
          <div className="flex space-x-3">
            <AnimatedButton
              variant="outline"
              className={glassButton}
              onClick={() => navigate('/')}
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.98 }}
            >
              <Home className="h-4 w-4 mr-2" />
              Back to Home
            </AnimatedButton>
            <AnimatedButton
              variant="outline"
              className={`${glassButton} bg-red-500/10 hover:bg-red-500/20 border-red-400/20 hover:border-red-400/30`}
              onClick={handleSignOut}
              disabled={isSigningOut}
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.98 }}
            >
              {isSigningOut ? (
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <LogOut className="h-4 w-4 mr-2" />
              )}
              Sign Out
            </AnimatedButton>
          </div>
        </motion.div>

        <Separator className="my-8 bg-indigo-400/20" />

        {/* Main Content */}
        <Tabs defaultValue="dashboard" className="w-full">
          <TabsList className={`${glassPanel} p-1 h-auto`}>
            <TabsTrigger 
              value="dashboard" 
              className="px-4 py-2 rounded-md data-[state=active]:bg-indigo-500/30 data-[state=active]:text-white"
            >
              <BarChart2 className="h-4 w-4 mr-2" />
              Dashboard
            </TabsTrigger>
            <TabsTrigger 
              value="courses" 
              className="px-4 py-2 rounded-md data-[state=active]:bg-indigo-500/30 data-[state=active]:text-white"
            >
              <BookOpen className="h-4 w-4 mr-2" />
              My Courses
            </TabsTrigger>
            <TabsTrigger 
              value="achievements" 
              className="px-4 py-2 rounded-md data-[state=active]:bg-indigo-500/30 data-[state=active]:text-white"
            >
              <Trophy className="h-4 w-4 mr-2" />
              Achievements
            </TabsTrigger>
          </TabsList>

          {/* Dashboard Tab */}
          <TabsContent value="dashboard" className="mt-6">
            <motion.div 
              className="grid gap-6 md:grid-cols-3"
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
            >
              <AnimatedCard 
                variants={fadeInUp}
                className={`${glassPanel} ${glassCardHover} p-6`}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-indigo-200">Courses in Progress</p>
                    <p className="text-3xl font-bold text-white mt-1">3</p>
                  </div>
                  <div className="p-3 rounded-full bg-indigo-500/20 text-indigo-300">
                    <BookOpen className="h-6 w-6" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="h-2 bg-indigo-900/30 rounded-full overflow-hidden">
                    <div className="h-full bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full" style={{ width: '65%' }} />
                  </div>
                  <p className="text-xs text-indigo-300 mt-2">65% of monthly goal</p>
                </div>
              </AnimatedCard>

              <AnimatedCard 
                variants={fadeInUp}
                className={`${glassPanel} ${glassCardHover} p-6`}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-indigo-200">Completed Courses</p>
                    <p className="text-3xl font-bold text-white mt-1">7</p>
                  </div>
                  <div className="p-3 rounded-full bg-green-500/20 text-green-300">
                    <CheckCircle className="h-6 w-6" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="h-2 bg-indigo-900/30 rounded-full overflow-hidden">
                    <div className="h-full bg-gradient-to-r from-green-400 to-teal-400 rounded-full" style={{ width: '85%' }} />
                  </div>
                  <p className="text-xs text-indigo-300 mt-2">85% completion rate</p>
                </div>
              </AnimatedCard>

              <AnimatedCard 
                variants={fadeInUp}
                className={`${glassPanel} ${glassCardHover} p-6`}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-indigo-200">Learning Streak</p>
                    <p className="text-3xl font-bold text-white mt-1">12 days</p>
                  </div>
                  <div className="p-3 rounded-full bg-amber-500/20 text-amber-300">
                    <TrendingUp className="h-6 w-6" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="h-2 bg-indigo-900/30 rounded-full overflow-hidden">
                    <div className="h-full bg-gradient-to-r from-amber-400 to-orange-400 rounded-full" style={{ width: '90%' }} />
                  </div>
                  <p className="text-xs text-indigo-300 mt-2">Best streak: 30 days</p>
                </div>
              </AnimatedCard>
            </motion.div>
          </TabsContent>

          {/* Courses Tab */}
          <TabsContent value="courses" className="mt-6">
            <motion.div 
              className="grid gap-6"
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
            >
              {mockCourses.map((course) => (
                <AnimatedCard
                  key={course.id}
                  variants={fadeInUp}
                  className={`${glassPanel} ${glassCardHover}`}
                >
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle>{course.title}</CardTitle>
                        <CardDescription>
                          Due {formatDate(course.dueDate)}
                        </CardDescription>
                      </div>
                      <Badge className="bg-indigo-500/20 text-indigo-200">
                        {course.progress}%
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <Progress value={course.progress} className="h-2 bg-indigo-900/30" />
                  </CardContent>
                  <CardFooter>
                    <AnimatedButton 
                      className={`${glassButton} w-full`}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      Continue Learning
                      <ChevronRight className="h-4 w-4 ml-2" />
                    </AnimatedButton>
                  </CardFooter>
                </AnimatedCard>
              ))}
            </motion.div>
          </TabsContent>

          {/* Achievements Tab */}
          <TabsContent value="achievements" className="mt-6">
            <motion.div 
              className="grid gap-6 md:grid-cols-2 lg:grid-cols-3"
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
            >
              {mockAchievements.map((achievement) => (
                <AnimatedCard
                  key={achievement.id}
                  variants={fadeInUp}
                  className={`${glassPanel} ${glassCardHover}`}
                >
                  <CardHeader className="flex flex-row items-center space-x-4">
                    <div className="p-3 rounded-full bg-indigo-500/20 text-indigo-300">
                      {achievement.icon}
                    </div>
                    <div>
                      <CardTitle className="text-lg">{achievement.title}</CardTitle>
                      <CardDescription>{achievement.description}</CardDescription>
                    </div>
                  </CardHeader>
                </AnimatedCard>
              ))}
            </motion.div>
          </TabsContent>
        </Tabs>
      </motion.div>
    </div>
  );
};

export default ProfilePage;
